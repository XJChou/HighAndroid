ViewRootImpl setDragFocus
W.dispatchDragEvent(DragEvent event):Void[服务端，提供系统调用] ->
ViewRootImpl.dispatchDragEvent(DragEvent event):Void[服务线程->主线程] ->
ViewRootImpl.handleDragEvent(DragEvent event):Void[与WindowSession通信] ->
DecorView.dispatchDragEvent(DragEvent event):Boolean[与ViewGroup一样]

ViewGroup自身Drag事件分发逻辑：
ViewGroup.dispatchDragEvent(DragEvent event):Boolean
    [ACTION_DRAG_STARTED] 子view 或者 当前父view 有返回true，则最终返回值为true 
        ViewGroup.notifyChildOfDragStart(View child):Boolean ｛分发给每个子view，有响应则加入mChildrenInterestedInDrag集合中｝, 子view如果处理此事件，则会标志为PFLAG2_DRAG_CAN_ACCEPT
        调用super.dispatchDragEvent(DragEvent event):Boolean ｛mIsInterestedInDrag = true｝

    [ACTION_DRAG_ENDED] 对应[ACTION_DRAG_STARTED]返回值操作
        mChildrenInterestedInDrag 不为空，则就是有响应的子view才会接受到 ACTION_DRAG_ENDED 事件
        mIsInterestedInDrag == true，则代表 父view 也响应，则也接受到 ACTION_DRAG_ENDED 事件

    [ACTION_DRAG_LOCATION || ACTION_DROP] 看对应的事件是否处理
        从后往前找【默认绘制顺序，找到在当前坐标的子view】
        找到target，target是子view的时候，分发给子view，如果是本身，则调用自身super.dispatchDragEvent


View自身Drag事件分发逻辑:
View.dispatchDragEvent(DragEvent event):Boolean
    -[DragEvent.ACTION_DRAG_LOCATION || DragEvent.ACTION_DROP]> ViewRootImpl.setDragFocus(View.this, DragEvent event)与ViewRootImpl的mCurrentDragView相比，得出【ACTION_DRAG_ENTERED，ACTION_DRAG_EXITED】类型
        ->  View[mCurrentDragView].callDragEventHandler DragEvent event) [DragEvent.ACTION_DRAG_EXITED]
        ->  View[newDragTarget].callDragEventHandler DragEvent event) [DragEvent.ACTION_DRAG_ENTERED]
    -> View.callDragEventHandler(DragEvent event):Boolean
        -[如果实现了OnDragListener.onDrag并返回true]-> mOnDragListener.onDrag(View.this, DragEvent event):Boolean
        -[默认实现]-> View.onDragEvent(DragEvent event):Boolean


所以 ACTION_DRAG_EXITED | ACTION_DRAG_ENTERED 通知只有一个view可以接受到
实际上整个Drag事件只有[ACTION_DRAG_STARTED] + [ACTION_DRAG_ENDED] + [ACTION_DRAG_LOCATION] + [ACTION_DROP] 传递
在ViewRootImpl帮助下，在[ACTION_DRAG_LOCATION|ACTION_DROP]事件下 -> 产生[ACTION_DRAG_ENTERED|ACTION_DRAG_EXITED]事件