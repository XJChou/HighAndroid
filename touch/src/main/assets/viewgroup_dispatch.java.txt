public boolean dispatchTouchEvent(MotionEvent ev) {
    boolean handled = false;

    // 标识是否是安全点击
    if (onFilterTouchEventForSecurity(ev)) {
        final int action = ev.getAction();
        final int actionMasked = action & MotionEvent.ACTION_MASK;
        // 如果是down事件，
        if (actionMasked == MotionEvent.ACTION_DOWN) {
            // 由于app切换、ANR或者一些状态改变导致数据没有正常置空，所以在down事件再次进行清空
        
            // 检查event是否为空，如果为空则是cancel事件
            // 派发给mFirstTouchTarget下的所有节点【当前手指源】
            // 分发event到子控件
            // 清除TouchTarget 
            cancelAndClearTouchTargets(ev);
            // 清除TouchTarget
            // ViewGroup状态取消
            resetTouchState();
        }
        final boolean intercepted;
        // 如果当前是down事件 或者 有子view点击事件
        if (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != null) {
            final boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0;
            if (!disallowIntercept) {
                intercepted = onInterceptTouchEvent(ev);
                ev.setAction(action); // restore action in case it was changed
            } else {
                intercepted = false;
            }
        } else {
            // 不是down事件，且没有子view响应，则不分发
            intercepted = true;
        }
        // 总结下来intercepted = true 要么就是没有子view响应，要么是父view抢夺
        
        // true 的时候 ==> view.mPrivateFlags & PFLAG_CANCEL_NEXT_UP_EVENT || 事件等于action_cancel
        final boolean canceled = resetCancelNextUpFlag(this) || actionMasked == MotionEvent.ACTION_CANCEL;
        // 判断是否是鼠标事件
        final boolean isMouseEvent = ev.getSource() == InputDevice.SOURCE_MOUSE;
        // 如果目标版本>=3.0默认含有多指事件 => 只要是触摸永为true
        final boolean split = (mGroupFlags & FLAG_SPLIT_MOTION_EVENTS) != 0 && !isMouseEvent;
        
        // 当次MotionEvent - Touch事件
        TouchTarget newTouchTarget = null;
        // 标记是否产生TouchTarget
        boolean alreadyDispatchedToNewTouchTarget = false;

        // 不是取消事件 且 不拦截的时候 【此方法主要有用于分发child事件】【其实这里是判断是接受down事件】
        if (!canceled && !intercepted) {

            if (actionMasked == MotionEvent.ACTION_DOWN
                    || (split && actionMasked == MotionEvent.ACTION_POINTER_DOWN)
                    || actionMasked == MotionEvent.ACTION_HOVER_MOVE) {
                final int actionIndex = ev.getActionIndex(); // always 0 for down
                final int idBitsToAssign = split ? 1 << ev.getPointerId(actionIndex)
                        : TouchTarget.ALL_POINTER_IDS;

                // 做个预防处理，防止 某些TouchTarget id没有变化
                removePointersFromTouchTargets(idBitsToAssign);

                final int childrenCount = mChildrenCount;
                // 当次事件还没有touch响应 且 数目不为空的时候
                if (newTouchTarget == null && childrenCount != 0) {
                    final float x = ev.getX(actionIndex);
                    final float y = ev.getY(actionIndex);

                    // 找到一个子view可以接受这事件；从前往后扫描所有子view

                    // buildTouchDispatchChildList【子view需要大于等于1 且 Z方向不为空的时候，才能返回非null】
                    // isChildrenDrawingOrderEnabled()默认ViewGroup为false，所以返回按照Z轴大小来排序【从小到大的顺序】｛使用的插入排序算法｝
                    final ArrayList<View> preorderedList = buildTouchDispatchChildList();

                    // 一般情况下，preorderedList必为null 且 isChildrenDrawingOrderEnabled()也是为false，则custom => false
                    final boolean customOrder = preorderedList == null && isChildrenDrawingOrderEnabled();
                    final View[] children = mChildren;
                    for (int i = childrenCount - 1; i >= 0; i--) {
                            // 如果custom等于false的时候 => int childIndex = i
                            final int childIndex = getAndVerifyPreorderedIndex(childrenCount, i, customOrder);
                            // 就是对应位置的child  => View child = children[childIndex]
                            final View child = getAndVerifyPreorderedView(preorderedList, children, childIndex);

                            // canReceivePointerEvents() 只要控件是VISIBLE状态 || 设置了R.anim的动画 就不会为false
                            // isTransformedTouchPointInView 经过坐标转换后判断是否在指定的子View内 这里使用的是屏幕坐标点一层一层子view减下去
                            if (!child.canReceivePointerEvents() || !isTransformedTouchPointInView(x, y, child, null)) {
                                continue;
                            }

                            // 根据当前能响应的【down/pointer_down】的子view，查找是否存在当前响应链中，存在则返回当前对应子view的TouchTarget，反之为null
                            // 从上面进入可得，如果newTouchTarget不为空，则代表，这时候的actionMask为pointerDown
                            newTouchTarget = getTouchTarget(child);
                            if (newTouchTarget != null) {
                                // 之前如果就存在，证明down或者pointer_down的时候点击过，给当前TouchTarget增加标记当次事件pointerID
                                newTouchTarget.pointerIdBits |= idBitsToAssign;
                                break;
                            }

                            // 为空代表没有点击过此view，代表down事件

                            // 重置子view状态
                            resetCancelNextUpFlag(child);

                            // 深拷贝一份MotionEvent，然后转换为子控件坐标
                            // event在里面会转换为子控件的坐标然后调用子控件dispatchTouchEvent
                            if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) {
                               
                                // 能进来代表有子view响应处理 
                                mLastTouchDownTime = ev.getDownTime();

                                ...
                                // 从上面可知，preorderedList必为null,所以省略为 mLastTouchDownIndex = childIndex;
                                mLastTouchDownIndex = childIndex;

                                // 因为为down事件可以使用 ev.getX() 和 ev.getY() 
                                mLastTouchDownX = ev.getX();
                                mLastTouchDownY = ev.getY();

                                // 增加到点击链中
                                newTouchTarget = addTouchTarget(child, idBitsToAssign);
                                alreadyDispatchedToNewTouchTarget = true;
                                break;
                            }
                    }
                    ...
                }

                // newTouchTarget 不为空 分为2种情况，第一种是点击到新view，第二种是多指到同一个view
                // 当前点击链上有响应，但是当次的newTouchTarget为空
                if (newTouchTarget == null && mFirstTouchTarget != null) {

                    // Did not find a child to receive the event.
                    // Assign the pointer to the least recently added target.

                    // 因为使用的是头插法，最开始响应的view，在链表的最后，默认让 尾节点默认接收【】
                    newTouchTarget = mFirstTouchTarget;
                    while (newTouchTarget.next != null) {
                        newTouchTarget = newTouchTarget.next;
                    }
                    newTouchTarget.pointerIdBits |= idBitsToAssign;
                }
            }

        }
        
        
        // 所有MotionEvent都会走这里
        if (mFirstTouchTarget == null) {
            // 没有子view响应的时候,分发给自己,可以接受所有pointer的event
            // newPointerIdBits == oldPointerIdBits => super.dispatchTouchEvent(event) 直接分发给自己
            handled = dispatchTransformedTouchEvent(ev, canceled, null, TouchTarget.ALL_POINTER_IDS);
        } else {
                // 当有点击链的时候，代表有子view响应过, 此次事件没有东西触发

                // Dispatch to touch targets, excluding the new touch target if we already
                // dispatched to it.  Cancel touch targets if necessary.
                TouchTarget predecessor = null;
                TouchTarget target = mFirstTouchTarget;

                while (target != null) {
                    final TouchTarget next = target.next;
                    // 如果是当次有子view响应的事件down或者pointerDown的时候，则代表处理此事件 && 事件触发
                    if (alreadyDispatchedToNewTouchTarget && target == newTouchTarget) {
                        handled = true;

                    } else {
                        
                        // resetCancelNextUpFlag一般情况下都是false
                        // intercepted == true 代表父view要拦截，则取消当前所有的点击子view
                        // intercepted == false 代表没有子view响应当前位置的点击事件
                        final boolean cancelChild = resetCancelNextUpFlag(target.child) || intercepted;

                        // 作用一：如果是父类拦截，则cancel所有已down/pointerDown事件的子view了【返回值可true可false】，并且事件修改为cancel类型
                        // 作用二：pointer到同一个view的时候【即多指】,只处理当前事件的pointer
                        if (dispatchTransformedTouchEvent(ev, cancelChild, target.child, target.pointerIdBits)) {
                            handled = true;
                        }

                        // 如果是拦截事件，则取消当前所有子view的点击链条并释放
                        if (cancelChild) {
                            if (predecessor == null) {
                                mFirstTouchTarget = next;
                            } else {
                                predecessor.next = next;
                            }
                            target.recycle();
                            target = next;
                            continue;
                        }
                    }
                    predecessor = target;
                    target = next;
                }
        }
        
        // 主要对 ACTION_UP 或者 ACTION_POINTER_UP 做回收处理
        if (canceled
                || actionMasked == MotionEvent.ACTION_UP
                || actionMasked == MotionEvent.ACTION_HOVER_MOVE) {
            // 清空Target链条
            resetTouchState();
        } else if (split && actionMasked == MotionEvent.ACTION_POINTER_UP) {
            final int actionIndex = ev.getActionIndex();
            final int idBitsToRemove = 1 << ev.getPointerId(actionIndex);
            //  移除指定的pointer[因为这个手指抬起了]
            removePointersFromTouchTargets(idBitsToRemove);
        }
    }
    return handled;
}